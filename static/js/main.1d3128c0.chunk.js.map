{"version":3,"sources":["components/Cell/Cell.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","Board","nrows","ncols","chanceLightStartsOn","useState","createBoard","board","setBoard","initialBoard","y","rows","x","push","Math","random","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","copy","r","every","row","cell","tableBoard","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAQeA,MALf,YAAkD,IAAlCC,EAAiC,EAAjCA,kBAAiC,IAAdC,MAC3BC,EAAO,oBADkC,SACf,WAAa,IAC7C,OAAO,wBAAIC,UAAWD,EAASE,QAASJ,K,MCwF3BK,MAxFf,YAAgE,IAAD,IAA9CC,aAA8C,MAAxC,EAAwC,MAArCC,aAAqC,MAA/B,EAA+B,MAA5BC,2BAA4B,MAAR,IAAQ,IACnCC,mBAASC,KAD0B,mBACtDC,EADsD,KAC/CC,EAD+C,KAG7D,SAASF,IAGP,IAFA,IAAIG,EAAe,GAEXC,EAAI,EAAGA,EAAIR,EAAOQ,IAAI,CAE5B,IADA,IAAIC,EAAO,GACHC,EAAE,EAAGA,EAAIT,EAAOS,IACtBD,EAAKE,KAAKC,KAAKC,SAAWX,GAE5BK,EAAaI,KAAKF,GAEpB,OAAOF,EAUT,SAASO,EAAgBC,GACvBT,GAAS,SAAAU,GAAa,IAAD,EACJD,EAAME,MAAM,KAAKC,IAAIC,QADjB,mBACZX,EADY,KACTE,EADS,KAGbU,EAAW,SAACZ,EAAGE,EAAGW,GAClBX,GAAK,GAAKA,EAAIT,GAASO,GAAK,GAAKA,EAAIR,IACvCqB,EAAUb,GAAGE,IAAMW,EAAUb,GAAGE,KAI5BY,EAAON,EAASE,KAAI,SAAAK,GAAC,mBAAMA,MAMjC,OALAH,EAASZ,EAAGE,EAAGY,GACfF,EAASZ,EAAE,EAAGE,EAAGY,GACjBF,EAASZ,EAAE,EAAGE,EAAGY,GACjBF,EAASZ,EAAGE,EAAE,EAAGY,GACjBF,EAASZ,EAAGE,EAAE,EAAGY,GACVA,KAGX,GAtBOjB,EAAMmB,OAAM,SAAAC,GAAG,OAAEA,EAAID,OAAM,SAAAE,GAAI,OAAKA,QAuBzC,OACE,6BACE,yCAMN,IADA,IAAIC,EAAa,GACTnB,EAAG,EAAGA,EAAIR,EAAOQ,IAAI,CAE3B,IADA,IAAIiB,EAAM,GADiB,WAEnBf,GACN,IAAIK,EAAK,UAAMP,EAAN,YAAWE,GACpBe,EAAId,KACF,kBAAC,EAAD,CACAiB,IAAKb,EACLpB,MAAOU,EAAMG,GAAGE,GAChBhB,kBAAmB,kBAAMoB,EAAgBC,QANrCL,EAAE,EAAGA,EAAIT,EAAOS,IAAK,EAArBA,GAURiB,EAAWhB,KAAK,wBAAIiB,IAAKpB,GAAIiB,IAGjC,OACE,yBAAK5B,UAAU,SACb,wBAAIA,UAAU,eAAd,cACA,yBAAKA,UAAU,wBACf,uBAAGA,UAAU,eAAb,eACA,6BADA,gFAGA,6BAHA,0EAKA,6BALA,4DAQA,2BAAOA,UAAU,eACjB,+BAAQ8B,IAEV,4BAAQ7B,QAAS,WAjEfQ,EAASF,OAiEX,c,MC1EWyB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1d3128c0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\nfunction Cell({ flipCellsAroundMe, isLit=false}) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe} />;\n}\n\nexport default Cell;","import React, { useState } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport \"./Board.css\";\n\n\nfunction Board({ nrows=5, ncols=5, chanceLightStartsOn=0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n  \n  function createBoard() {\n    let initialBoard = [];\n    \n    for(let y = 0; y < nrows; y++){\n      let rows = []\n      for(let x=0; x < ncols; x++){\n        rows.push(Math.random() < chanceLightStartsOn)\n      }\n      initialBoard.push(rows)\n    }\n    return initialBoard;\n  }\n    function reset(){\n      setBoard(createBoard())\n    }\n\n  function hasWon() {\n    return board.every(row=>row.every(cell => !cell))\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      \n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n        const copy = oldBoard.map(r=>[...r])\n        flipCell(y, x, copy)\n        flipCell(y+1, x, copy)\n        flipCell(y-1, x, copy)\n        flipCell(y, x+1, copy)\n        flipCell(y, x-1, copy)\n        return copy;\n    });\n  }\n    if(hasWon()){\n      return(\n        <div>\n          <h1>You win!</h1>\n        </div>\n      )\n    }\n\n    let tableBoard = []\n    for(let y= 0; y < nrows; y++){\n      let row = []\n      for(let x=0; x < ncols; x++){\n        let coord = `${y}-${x}`\n        row.push(\n          <Cell \n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n          />\n        )\n      } \n      tableBoard.push(<tr key={y}>{row}</tr>)\n    \n  }\n  return(\n    <div className=\"Board\">\n      <h1 className=\"Board-title\">Lights Out</h1>\n      <div className=\"Board-rulesContainer\">\n      <p className=\"Board-rules\">How to Play: \n      <br/>\n      When the game starts, a random stored pattern of these lights is switched on. \n      <br />\n      Pressing any of the lights will toggle it and the four adjacent lights. \n      <br />\n      The goal of the puzzle is to switch all the lights off.</p>\n      </div>\n      <table className=\"Board-table\">\n      <tbody>{tableBoard}</tbody>\n    </table>\n    <button onClick={() => reset()}>New Game</button>\n   \n    </div>\n  )\n}\n\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./components/Board/Board\";\nimport \"./App.css\";\n\nfunction App(){\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}